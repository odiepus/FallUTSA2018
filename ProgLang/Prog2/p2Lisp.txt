

(defun last1 (L)
(cond
((null (cdr L)) (car L))
(T (Last1 (cdr L)))
))

(defun remlast (L)
(cond
((null L) nil)
((null (cdr L)) nil)
(T (cons (car L) ( remlast (cdr L) )))
))

(defun removeNILTop (L)
(cond
((null L) nil)
((eql nil (car L)) (removeNILTop (cdr L)))
(T (cons (car L) (removeNILTop (cdr L))))
))

(defun removeNILMost (L)
(cond
((null L) nil)
((eql nil (car L)) (removeNILMost (cdr L)))
((atom (car L)) (cons (car l) (removeNILMost (cdr L))))
(T (cons (removeNILMost (car L)) (removeNILMost (cdr L))))
))

(defun reverseTop (L)
(cond
((null L) nil)
(T (append (reverseTop (cdr L)) (cons (car L) nil)))
))

(defun reverseAll (L)
(cond 
((null L) nil)
((atom (car L)) (append (reverseAll (cdr L)) (cons (car L) nil)))
(T (append (reverseAll (cdr L)) (cons (reverseAll (car L)) nil)))
))

(defun palindrome (L)
(cond
((null (cdr L)) T)
((eql (car L) (last1 L)) (palindrome (remlast (cdr L))))
(T nil)
))
